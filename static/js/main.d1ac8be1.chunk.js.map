{"version":3,"sources":["components/Navigation/Navigation.js","components/Signin/Signin.js","components/Register/Register.js","components/Dashboard/Dashboard.js","components/SetGoals/SetGoals.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","_ref","onRouteChange","isSignedIn","react_default","a","createElement","style","display","justifyContent","onClick","className","Signin","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","Content-Type","body","JSON","stringify","email","state","password","then","response","json","user","id","loadUser","htmlFor","type","name","onChange","React","Component","Register","onNameChange","Dashboard","SetGoals","onSetGoalsButton","route","date","goalStart","goalstart","goalEnd","goalend","catch","console","log","initialState","App","_this$state","components_Navigation_Navigation","components_Dashboard_Dashboard","components_SetGoals_SetGoals","components_Signin_Signin","components_Register_Register","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d1ac8be1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\r\n        if (isSignedIn) {\r\n          return (\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signout')}className='f3 link dim black underline pa3 pointer'>Sign Out</p>\r\n            </nav>\r\n          );  \r\n        } else {\r\n          return (\r\n            <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                <p onClick={() => onRouteChange('signin')}className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n                <p onClick={() => onRouteChange('register')}className='f3 link dim black underline pa3 pointer'>Register</p>\r\n            </nav>\r\n          );  \r\n            \r\n        }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n \r\n\r\n\r\nclass Signin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            signInEmail: '',\r\n            signInPassword: '',\r\n        }\r\n    }\r\n    onEmailChange = (event) => {\r\n        this.setState({signInEmail: event.target.value})\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n        this.setState({signInPassword: event.target.value})\r\n    }\r\n\r\n    onSubmitSignIn = () => {\r\n        fetch('http://localhost:3000/signin', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: this.state.signInEmail,\r\n                password: this.state.signInPassword\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n                if(user.id) {\r\n                    this.props.loadUser(user);\r\n                    this.props.onRouteChange('home');\r\n                }\r\n            })\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { onRouteChange } = this.props;\r\n        return (\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\" >\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n                        <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                        <input \r\n                            className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                            type=\"email\" \r\n                            name=\"email-address\"  \r\n                            id=\"email-address\" \r\n                            onChange={this.onEmailChange}    \r\n                        />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                        <input \r\n                            className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                            type=\"password\" \r\n                            name=\"password\"  \r\n                            id=\"password\" \r\n                            onChange={this.onPasswordChange}   \r\n                        />\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input onClick={this.onSubmitSignIn}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\" \r\n                            value=\"Sign in\" />\r\n                    </div>\r\n                    <div className=\"lh-copy mt3\">\r\n                        <p onClick={()=> onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\r\n                    </div>\r\n                    </div>\r\n            </main>\r\n        </article>\r\n        ); \r\n    }\r\n    \r\n}\r\n\r\nexport default Signin;","import React from 'react';\r\n \r\n\r\n\r\nclass Register extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            name: '',\r\n        }\r\n    }\r\n\r\n    onNameChange = (event) => {\r\n        this.setState({name: event.target.value})\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n        this.setState({email: event.target.value})\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n        this.setState({password: event.target.value})\r\n    }\r\n\r\n    onSubmitSignIn = () => {\r\n        fetch('http://localhost:3000/register', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name,\r\n            })\r\n        })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n                if(user.id) {\r\n                    this.props.loadUser(user)\r\n                    this.props.onRouteChange('setgoal')\r\n                }\r\n            })\r\n        \r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\" >\r\n                <main className=\"pa4 black-80\">\r\n                    <div className=\"measure\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n                        <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"names\">Name</label>\r\n                        <input \r\n                            className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                            type=\"text\" \r\n                            name=\"name\"  \r\n                            id=\"name\" \r\n                            onChange={this.onNameChange}\r\n\r\n                        />\r\n                        </div>\r\n                        <div className=\"mt3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                        <input \r\n                            className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                            type=\"email\" \r\n                            name=\"email-address\"  \r\n                            id=\"email-address\" \r\n                            onChange={this.onEmailChange}\r\n\r\n                        />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                        <input \r\n                            className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n                            type=\"password\" \r\n                            name=\"password\"  \r\n                            id=\"password\" \r\n                            onChange={this.onPasswordChange}\r\n\r\n                        />\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <input onClick={this.onSubmitSignIn}\r\n                            className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                            type=\"submit\" \r\n                            value=\"Register\" />\r\n                    </div>\r\n                \r\n                    </div>\r\n            </main>\r\n        </article>\r\n        );  \r\n    }\r\n    \r\n}\r\n\r\nexport default Register;","import React from 'react'; \r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <div>\r\n            <h1>This will be the dashboard to review goals</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard; ","import React from 'react'; \r\n\r\n\r\n\r\n\r\nclass SetGoals extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            route: 'startButton',\r\n            goalStart: '',\r\n            goalEnd: ''\r\n        }\r\n    } \r\n\r\n\r\n    onSetGoalsButton = () => {\r\n        \r\n        if(this.state.route === 'startButton'){\r\n           fetch('http://localhost:3000/setgoals', {\r\n                method:'get',\r\n                headers: {'Content-Type': 'application/json'},\r\n           })\r\n           .then(response => response.json())\r\n           .then(date => {\r\n                this.setState({\r\n                    goalStart: date.goalstart,\r\n                    goalEnd: date.goalend\r\n                })\r\n           })\r\n           .catch(console.log)\r\n\r\n           this.setState({route: 'anything'});\r\n            \r\n        } else {\r\n            this.setState({route: 'startButton'});   \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { route } = this.state\r\n        return (\r\n          <div className='setGoals'>\r\n            {route === 'startButton'\r\n            ? <div>\r\n                <button onClick={this.onSetGoalsButton}>Set New Goals</button>\r\n              </div>\r\n            : (\r\n               <div>\r\n                <h1>Your current goal range is {this.state.goalStart} - {this.state.goalEnd}</h1> \r\n                <button onClick={this.onSetGoalsButton}>reset</button>\r\n               </div> \r\n             )\r\n            }\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SetGoals;  \r\n\r\n            ","import React, { Component } from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\nimport Dashboard from './components/Dashboard/Dashboard'; \nimport SetGoals from './components/SetGoals/SetGoals'; \nimport './App.css';\n\n \nconst initialState = {\n  route: 'setgoals',\n  isSignedIn: false,\n  user: {\n    id: '',\n    name: '',\n    email: '',\n    password: '',\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState\n  }\n\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState(initialState)\n    } else if (route === 'home') {\n      this.setState({isSignedIn: true});\n    }\n      this.setState({route: route});\n  }\n  \n  render() {\n    const { isSignedIn, route } = this.state;\n    return (\n      <div className=\"App\">\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\n        { route === 'home'\n            ? <div>\n              <Dashboard />\n            </div>\n            : (\n                route === 'setgoals'\n                ? <div>\n                    <SetGoals />\n                </div>\n                : (\n                  route === 'signin'\n                  ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n                  : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n                )\n              )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}